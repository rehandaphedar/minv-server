// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package sqlc

import (
	"context"
)

const authInsertChannel = `-- name: AuthInsertChannel :one
INSERT INTO channels (channelname, password)
    VALUES (?1, ?2)
RETURNING
    channelname, created, password
`

type AuthInsertChannelParams struct {
	Channelname string `json:"channelname"`
	Password    string `json:"password"`
}

func (q *Queries) AuthInsertChannel(ctx context.Context, arg AuthInsertChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, authInsertChannel, arg.Channelname, arg.Password)
	var i Channel
	err := row.Scan(&i.Channelname, &i.Created, &i.Password)
	return i, err
}

const authSelectChannel = `-- name: AuthSelectChannel :one
SELECT
    channelname, created, password
FROM
    channels
WHERE
    channelname = ?1
`

func (q *Queries) AuthSelectChannel(ctx context.Context, channelname string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, authSelectChannel, channelname)
	var i Channel
	err := row.Scan(&i.Channelname, &i.Created, &i.Password)
	return i, err
}
