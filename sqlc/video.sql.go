// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: video.sql

package sqlc

import (
	"context"
)

const videoDeleteVideo = `-- name: VideoDeleteVideo :one
DELETE FROM
	   videos
	   WHERE slug=?1
RETURNING slug, title, description, uploader, uploaded, processed
`

func (q *Queries) VideoDeleteVideo(ctx context.Context, slug string) (Video, error) {
	row := q.db.QueryRowContext(ctx, videoDeleteVideo, slug)
	var i Video
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Uploader,
		&i.Uploaded,
		&i.Processed,
	)
	return i, err
}

const videoInsertVideo = `-- name: VideoInsertVideo :one
INSERT INTO
	   videos(slug, title, description, uploader)
	   values(?1, ?2, ?3, ?4)
RETURNING slug, title, description, uploader, uploaded, processed
`

type VideoInsertVideoParams struct {
	Slug        string `json:"slug"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Uploader    string `json:"uploader"`
}

func (q *Queries) VideoInsertVideo(ctx context.Context, arg VideoInsertVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, videoInsertVideo,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Uploader,
	)
	var i Video
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Uploader,
		&i.Uploaded,
		&i.Processed,
	)
	return i, err
}

const videoSelectVideo = `-- name: VideoSelectVideo :one
SELECT slug, title, description, uploader, uploaded, processed FROM videos where slug=?1
`

func (q *Queries) VideoSelectVideo(ctx context.Context, slug string) (Video, error) {
	row := q.db.QueryRowContext(ctx, videoSelectVideo, slug)
	var i Video
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Uploader,
		&i.Uploaded,
		&i.Processed,
	)
	return i, err
}

const videoSelectVideos = `-- name: VideoSelectVideos :many
SELECT slug, title, description, uploader, uploaded, processed FROM videos
`

func (q *Queries) VideoSelectVideos(ctx context.Context) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, videoSelectVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Uploader,
			&i.Uploaded,
			&i.Processed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const videoSelectVideosByChannel = `-- name: VideoSelectVideosByChannel :many
SELECT slug, title, description, uploader, uploaded, processed FROM videos where uploader=?1
`

func (q *Queries) VideoSelectVideosByChannel(ctx context.Context, uploader string) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, videoSelectVideosByChannel, uploader)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Video{}
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.Uploader,
			&i.Uploaded,
			&i.Processed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const videoUpdateVideo = `-- name: VideoUpdateVideo :one
UPDATE videos
	   SET title=?1, description=?2, processed=?3
	   WHERE slug=?4
RETURNING slug, title, description, uploader, uploaded, processed
`

type VideoUpdateVideoParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Processed   int64  `json:"processed"`
	Slug        string `json:"slug"`
}

func (q *Queries) VideoUpdateVideo(ctx context.Context, arg VideoUpdateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, videoUpdateVideo,
		arg.Title,
		arg.Description,
		arg.Processed,
		arg.Slug,
	)
	var i Video
	err := row.Scan(
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Uploader,
		&i.Uploaded,
		&i.Processed,
	)
	return i, err
}
