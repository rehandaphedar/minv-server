// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channel.sql

package sqlc

import (
	"context"
)

const channelDeleteChannel = `-- name: ChannelDeleteChannel :one
DELETE FROM
	   channels
WHERE
	channelname = ?1
RETURNING channelname, created
`

type ChannelDeleteChannelRow struct {
	Channelname string `json:"channelname"`
	Created     string `json:"created"`
}

func (q *Queries) ChannelDeleteChannel(ctx context.Context, channelname string) (ChannelDeleteChannelRow, error) {
	row := q.db.QueryRowContext(ctx, channelDeleteChannel, channelname)
	var i ChannelDeleteChannelRow
	err := row.Scan(&i.Channelname, &i.Created)
	return i, err
}

const channelSelectChannel = `-- name: ChannelSelectChannel :one
SELECT
    channelname, created
FROM
    channels
WHERE
    channelname = ?1
`

type ChannelSelectChannelRow struct {
	Channelname string `json:"channelname"`
	Created     string `json:"created"`
}

func (q *Queries) ChannelSelectChannel(ctx context.Context, channelname string) (ChannelSelectChannelRow, error) {
	row := q.db.QueryRowContext(ctx, channelSelectChannel, channelname)
	var i ChannelSelectChannelRow
	err := row.Scan(&i.Channelname, &i.Created)
	return i, err
}

const channelSelectChannels = `-- name: ChannelSelectChannels :many
SELECT
    channelname, created
FROM
    channels
`

type ChannelSelectChannelsRow struct {
	Channelname string `json:"channelname"`
	Created     string `json:"created"`
}

func (q *Queries) ChannelSelectChannels(ctx context.Context) ([]ChannelSelectChannelsRow, error) {
	rows, err := q.db.QueryContext(ctx, channelSelectChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChannelSelectChannelsRow{}
	for rows.Next() {
		var i ChannelSelectChannelsRow
		if err := rows.Scan(&i.Channelname, &i.Created); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
